{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91719,"databundleVersionId":12937777,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/marpinipavansrikar/votingmodel-xgboost-lightbgm-catboost-optunatuning?scriptVersionId=254252467\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport optuna\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"77f90f37-90d2-4bf6-8c0c-c86af837ea8e","_cell_guid":"4a5f9e90-5f9c-455a-b7d0-9b268141e833","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-08-05T02:26:09.734024Z","iopub.execute_input":"2025-08-05T02:26:09.734212Z","iopub.status.idle":"2025-08-05T02:26:09.740366Z","shell.execute_reply.started":"2025-08-05T02:26:09.734187Z","shell.execute_reply":"2025-08-05T02:26:09.739532Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s5e8/sample_submission.csv\n/kaggle/input/playground-series-s5e8/train.csv\n/kaggle/input/playground-series-s5e8/test.csv\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"<div style=\"\n  border-top: 4px solid #A970FF;\n  padding: 16px 20px;\n  background-color: #1a1a1a;\n  color: white;\n  border-radius: 8px;\n  font-family: 'Segoe UI', sans-serif;\n  line-height: 1.6;\n\">\n  <h3 style=\"color: #A970FF; margin-top: 0;\">ðŸ“˜ Dataset Columns</h3>\n  <ul style=\"padding-left: 18px; margin: 10px 0;\">\n    <li><strong>id</strong>: Unique identifier for each row (only in the test set).</li>\n    <li><strong>age</strong>: Age of the client (numeric).</li>\n    <li><strong>job</strong>: Type of job (e.g., admin., technician, services).</li>\n    <li><strong>marital</strong>: Marital status (married, single, divorced).</li>\n    <li><strong>education</strong>: Education level (e.g., primary, secondary, tertiary).</li>\n    <li><strong>default</strong>: Whether the client has credit in default (yes/no).</li>\n    <li><strong>balance</strong>: Average yearly balance (numeric).</li>\n    <li><strong>housing</strong>: Whether the client has a housing loan (yes/no).</li>\n    <li><strong>loan</strong>: Whether the client has a personal loan (yes/no).</li>\n    <li><strong>contact</strong>: Contact communication type (cellular etc).</li>\n    <li><strong>day</strong>: Last contact day.</li>\n    <li><strong>month</strong>: Last contact month.</li>\n    <li><strong>duration</strong>: Last contact duration, in seconds.</li>\n    <li><strong>campaign</strong>: Number of contacts during this campaign.</li>\n    <li><strong>pdays</strong>: Days since the client was last contacted.</li>\n    <li><strong>previous</strong>: Number of contacts before this campaign.</li>\n    <li><strong>poutcome</strong>: Outcome of the previous marketing campaign.</li>\n    <li><strong>y</strong>: Target; whether the client subscribed to a term deposit (1 = yes, 0 = no).</li>\n  </ul>\n</div>","metadata":{"_uuid":"8a838590-cd46-4edf-a588-c1f8fda1dce7","_cell_guid":"cfae29c9-ec09-4da9-8702-3466d64b28f0","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder,OrdinalEncoder,LabelEncoder,StandardScaler\nfrom sklearn.model_selection import train_test_split,cross_val_score,StratifiedKFold,RandomizedSearchCV\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix,roc_auc_score\n\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier,StackingClassifier,VotingClassifier\nfrom lightgbm import LGBMClassifier\n\nimport joblib\n\nimport warnings \nwarnings.filterwarnings('ignore')","metadata":{"_uuid":"2e9b46e4-4856-466a-9885-3cbeb3690c9e","_cell_guid":"80c31b5c-9f86-4351-9e6d-b95a3b31ed3c","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-08-05T02:26:12.924114Z","iopub.execute_input":"2025-08-05T02:26:12.924661Z","iopub.status.idle":"2025-08-05T02:26:17.860228Z","shell.execute_reply.started":"2025-08-05T02:26:12.924636Z","shell.execute_reply":"2025-08-05T02:26:17.859419Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"<div style=\"\n  border-top: 4px solid #A970FF;\n  padding: 16px 20px;\n  background-color: #1a1a1a;\n  color: white;\n  border-radius: 8px;\n  font-family: 'Segoe UI', sans-serif;\n  line-height: 1.6;\n\">\n  <h3 style=\"color: #A970FF; margin-top: 0;\">ðŸ“Š Importing Data</h3>\n  <ul style=\"padding-left: 18px; margin: 10px 0;\">\n\n  </ul>\n</div>","metadata":{"_uuid":"518fa5e7-1d7a-4f4d-a74d-a0f2b0ae7011","_cell_guid":"80d0b560-ef6c-453c-b7de-6d9f25d0cb9e","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"data_tr = pd.read_csv('/kaggle/input/playground-series-s5e8/train.csv')\ndata_tr.head(3)","metadata":{"_uuid":"40dec21b-699e-4f88-a089-e29b6bada4eb","_cell_guid":"c3c13c77-9ca4-4ad2-be20-afe571afd960","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-08-05T02:26:17.861615Z","iopub.execute_input":"2025-08-05T02:26:17.862182Z","iopub.status.idle":"2025-08-05T02:26:19.776667Z","shell.execute_reply.started":"2025-08-05T02:26:17.86216Z","shell.execute_reply":"2025-08-05T02:26:19.775931Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   id  age          job  marital  education default  balance housing loan  \\\n0   0   42   technician  married  secondary      no        7      no   no   \n1   1   38  blue-collar  married  secondary      no      514      no   no   \n2   2   36  blue-collar  married  secondary      no      602     yes   no   \n\n    contact  day month  duration  campaign  pdays  previous poutcome  y  \n0  cellular   25   aug       117         3     -1         0  unknown  0  \n1   unknown   18   jun       185         1     -1         0  unknown  0  \n2   unknown   14   may       111         2     -1         0  unknown  0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>age</th>\n      <th>job</th>\n      <th>marital</th>\n      <th>education</th>\n      <th>default</th>\n      <th>balance</th>\n      <th>housing</th>\n      <th>loan</th>\n      <th>contact</th>\n      <th>day</th>\n      <th>month</th>\n      <th>duration</th>\n      <th>campaign</th>\n      <th>pdays</th>\n      <th>previous</th>\n      <th>poutcome</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>42</td>\n      <td>technician</td>\n      <td>married</td>\n      <td>secondary</td>\n      <td>no</td>\n      <td>7</td>\n      <td>no</td>\n      <td>no</td>\n      <td>cellular</td>\n      <td>25</td>\n      <td>aug</td>\n      <td>117</td>\n      <td>3</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>unknown</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>38</td>\n      <td>blue-collar</td>\n      <td>married</td>\n      <td>secondary</td>\n      <td>no</td>\n      <td>514</td>\n      <td>no</td>\n      <td>no</td>\n      <td>unknown</td>\n      <td>18</td>\n      <td>jun</td>\n      <td>185</td>\n      <td>1</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>unknown</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>36</td>\n      <td>blue-collar</td>\n      <td>married</td>\n      <td>secondary</td>\n      <td>no</td>\n      <td>602</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>unknown</td>\n      <td>14</td>\n      <td>may</td>\n      <td>111</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>unknown</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"data_tr.shape","metadata":{"_uuid":"3d5f4d34-e397-4221-ab4b-13b53dd14866","_cell_guid":"61533fc8-6880-4de7-84e9-eb3d2f420dab","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-08-05T02:26:19.77758Z","iopub.execute_input":"2025-08-05T02:26:19.777862Z","iopub.status.idle":"2025-08-05T02:26:19.78239Z","shell.execute_reply.started":"2025-08-05T02:26:19.777826Z","shell.execute_reply":"2025-08-05T02:26:19.78186Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"(750000, 18)"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"data_te = pd.read_csv('/kaggle/input/playground-series-s5e8/test.csv')\ndata_te.head(3)","metadata":{"_uuid":"4187eb0f-8c5d-4310-9efc-b6e2fa90037c","_cell_guid":"5bc93e1e-0aba-41f8-8e78-bf0babc49c0e","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-08-05T02:26:19.783647Z","iopub.execute_input":"2025-08-05T02:26:19.784018Z","iopub.status.idle":"2025-08-05T02:26:20.334319Z","shell.execute_reply.started":"2025-08-05T02:26:19.784Z","shell.execute_reply":"2025-08-05T02:26:20.333451Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"       id  age            job  marital  education default  balance housing  \\\n0  750000   32    blue-collar  married  secondary      no     1397     yes   \n1  750001   44     management  married   tertiary      no       23     yes   \n2  750002   36  self-employed  married    primary      no       46     yes   \n\n  loan   contact  day month  duration  campaign  pdays  previous poutcome  \n0   no   unknown   21   may       224         1     -1         0  unknown  \n1   no  cellular    3   apr       586         2     -1         0  unknown  \n2  yes  cellular   13   may       111         2     -1         0  unknown  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>age</th>\n      <th>job</th>\n      <th>marital</th>\n      <th>education</th>\n      <th>default</th>\n      <th>balance</th>\n      <th>housing</th>\n      <th>loan</th>\n      <th>contact</th>\n      <th>day</th>\n      <th>month</th>\n      <th>duration</th>\n      <th>campaign</th>\n      <th>pdays</th>\n      <th>previous</th>\n      <th>poutcome</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>750000</td>\n      <td>32</td>\n      <td>blue-collar</td>\n      <td>married</td>\n      <td>secondary</td>\n      <td>no</td>\n      <td>1397</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>unknown</td>\n      <td>21</td>\n      <td>may</td>\n      <td>224</td>\n      <td>1</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>unknown</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>750001</td>\n      <td>44</td>\n      <td>management</td>\n      <td>married</td>\n      <td>tertiary</td>\n      <td>no</td>\n      <td>23</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>cellular</td>\n      <td>3</td>\n      <td>apr</td>\n      <td>586</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>unknown</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>750002</td>\n      <td>36</td>\n      <td>self-employed</td>\n      <td>married</td>\n      <td>primary</td>\n      <td>no</td>\n      <td>46</td>\n      <td>yes</td>\n      <td>yes</td>\n      <td>cellular</td>\n      <td>13</td>\n      <td>may</td>\n      <td>111</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>unknown</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"data_te.shape","metadata":{"_uuid":"d314948a-bd3f-44b8-ab2b-33c33d742da9","_cell_guid":"a92b4230-78af-447f-b58b-cb14e00cc7df","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:20.335203Z","iopub.execute_input":"2025-08-05T02:26:20.335591Z","iopub.status.idle":"2025-08-05T02:26:20.341135Z","shell.execute_reply.started":"2025-08-05T02:26:20.335562Z","shell.execute_reply":"2025-08-05T02:26:20.340485Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"(250000, 17)"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"data = pd.concat([data_tr,data_te],axis=0)\ndata","metadata":{"_uuid":"6ca1d439-a433-4a93-81a1-3ff3f3f6a7b5","_cell_guid":"ebadf0b0-9611-42bb-bc60-d002c48feb30","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:20.341921Z","iopub.execute_input":"2025-08-05T02:26:20.34221Z","iopub.status.idle":"2025-08-05T02:26:20.451658Z","shell.execute_reply.started":"2025-08-05T02:26:20.342184Z","shell.execute_reply":"2025-08-05T02:26:20.451022Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"            id  age          job  marital  education default  balance housing  \\\n0            0   42   technician  married  secondary      no        7      no   \n1            1   38  blue-collar  married  secondary      no      514      no   \n2            2   36  blue-collar  married  secondary      no      602     yes   \n3            3   27      student   single  secondary      no       34     yes   \n4            4   26   technician  married  secondary      no      889     yes   \n...        ...  ...          ...      ...        ...     ...      ...     ...   \n249995  999995   43   management  married   tertiary      no        0     yes   \n249996  999996   40     services  married    unknown      no      522     yes   \n249997  999997   63      retired  married    primary      no       33      no   \n249998  999998   50  blue-collar  married    primary      no     2629     yes   \n249999  999999   29      student   single   tertiary      no      722      no   \n\n       loan   contact  day month  duration  campaign  pdays  previous  \\\n0        no  cellular   25   aug       117         3     -1         0   \n1        no   unknown   18   jun       185         1     -1         0   \n2        no   unknown   14   may       111         2     -1         0   \n3        no   unknown   28   may        10         2     -1         0   \n4        no  cellular    3   feb       902         1     -1         0   \n...     ...       ...  ...   ...       ...       ...    ...       ...   \n249995   no  cellular   18   nov        65         2     -1         0   \n249996   no  cellular   19   nov       531         1    189         1   \n249997   no  cellular    3   jul       178         1     92         8   \n249998   no   unknown   30   may       163         2     -1         0   \n249999   no  cellular    6   apr       119         1     -1         0   \n\n       poutcome    y  \n0       unknown  0.0  \n1       unknown  0.0  \n2       unknown  0.0  \n3       unknown  0.0  \n4       unknown  1.0  \n...         ...  ...  \n249995  unknown  NaN  \n249996  failure  NaN  \n249997  success  NaN  \n249998  unknown  NaN  \n249999  unknown  NaN  \n\n[1000000 rows x 18 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>age</th>\n      <th>job</th>\n      <th>marital</th>\n      <th>education</th>\n      <th>default</th>\n      <th>balance</th>\n      <th>housing</th>\n      <th>loan</th>\n      <th>contact</th>\n      <th>day</th>\n      <th>month</th>\n      <th>duration</th>\n      <th>campaign</th>\n      <th>pdays</th>\n      <th>previous</th>\n      <th>poutcome</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>42</td>\n      <td>technician</td>\n      <td>married</td>\n      <td>secondary</td>\n      <td>no</td>\n      <td>7</td>\n      <td>no</td>\n      <td>no</td>\n      <td>cellular</td>\n      <td>25</td>\n      <td>aug</td>\n      <td>117</td>\n      <td>3</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>unknown</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>38</td>\n      <td>blue-collar</td>\n      <td>married</td>\n      <td>secondary</td>\n      <td>no</td>\n      <td>514</td>\n      <td>no</td>\n      <td>no</td>\n      <td>unknown</td>\n      <td>18</td>\n      <td>jun</td>\n      <td>185</td>\n      <td>1</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>unknown</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>36</td>\n      <td>blue-collar</td>\n      <td>married</td>\n      <td>secondary</td>\n      <td>no</td>\n      <td>602</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>unknown</td>\n      <td>14</td>\n      <td>may</td>\n      <td>111</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>unknown</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>27</td>\n      <td>student</td>\n      <td>single</td>\n      <td>secondary</td>\n      <td>no</td>\n      <td>34</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>unknown</td>\n      <td>28</td>\n      <td>may</td>\n      <td>10</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>unknown</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>26</td>\n      <td>technician</td>\n      <td>married</td>\n      <td>secondary</td>\n      <td>no</td>\n      <td>889</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>cellular</td>\n      <td>3</td>\n      <td>feb</td>\n      <td>902</td>\n      <td>1</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>unknown</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>249995</th>\n      <td>999995</td>\n      <td>43</td>\n      <td>management</td>\n      <td>married</td>\n      <td>tertiary</td>\n      <td>no</td>\n      <td>0</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>cellular</td>\n      <td>18</td>\n      <td>nov</td>\n      <td>65</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>unknown</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>249996</th>\n      <td>999996</td>\n      <td>40</td>\n      <td>services</td>\n      <td>married</td>\n      <td>unknown</td>\n      <td>no</td>\n      <td>522</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>cellular</td>\n      <td>19</td>\n      <td>nov</td>\n      <td>531</td>\n      <td>1</td>\n      <td>189</td>\n      <td>1</td>\n      <td>failure</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>249997</th>\n      <td>999997</td>\n      <td>63</td>\n      <td>retired</td>\n      <td>married</td>\n      <td>primary</td>\n      <td>no</td>\n      <td>33</td>\n      <td>no</td>\n      <td>no</td>\n      <td>cellular</td>\n      <td>3</td>\n      <td>jul</td>\n      <td>178</td>\n      <td>1</td>\n      <td>92</td>\n      <td>8</td>\n      <td>success</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>249998</th>\n      <td>999998</td>\n      <td>50</td>\n      <td>blue-collar</td>\n      <td>married</td>\n      <td>primary</td>\n      <td>no</td>\n      <td>2629</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>unknown</td>\n      <td>30</td>\n      <td>may</td>\n      <td>163</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>unknown</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>249999</th>\n      <td>999999</td>\n      <td>29</td>\n      <td>student</td>\n      <td>single</td>\n      <td>tertiary</td>\n      <td>no</td>\n      <td>722</td>\n      <td>no</td>\n      <td>no</td>\n      <td>cellular</td>\n      <td>6</td>\n      <td>apr</td>\n      <td>119</td>\n      <td>1</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>unknown</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>1000000 rows Ã— 18 columns</p>\n</div>"},"metadata":{}}],"execution_count":8},{"cell_type":"markdown","source":"<div style=\"\n  border-top: 4px solid #A970FF;\n  padding: 16px 20px;\n  background-color: #1a1a1a;\n  color: white;\n  border-radius: 8px;\n  font-family: 'Segoe UI', sans-serif;\n  line-height: 1.6;\n\">\n  <h3 style=\"color: #A970FF; margin-top: 0;\">ðŸ”¹ Null Values </h3>\n  <ul style=\"padding-left: 18px; margin: 10px 0;\">\n    \n  </ul>\n</div>","metadata":{"_uuid":"3090a034-e1ff-4ee5-b1b2-c476b38a118e","_cell_guid":"7b4d27cb-a83f-413e-b66f-14bcb3c8687a","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"*  Check for null values using the function **isnull()**.\n\n*  If there any null values they can be further filled by using the function **SimpleImputer()** using which categorical columns can be filled by setting parameter  *stratagy* to mostfrequent else for numerical by setting it to mean.\n\n*  Here in the case of our data there are null values with label 'unknown' .","metadata":{"_uuid":"1d1b3a95-356a-4195-86d4-e0680bf87a9d","_cell_guid":"64c1a198-75ff-441b-af99-f5b9958c7037","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"sns.heatmap(data.isnull())","metadata":{"_uuid":"2f1be8d9-f322-45aa-8c53-8a6c0be0215d","_cell_guid":"51c79e6f-b2a0-4cac-9eef-36070c132494","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:20.452292Z","iopub.execute_input":"2025-08-05T02:26:20.452507Z","iopub.status.idle":"2025-08-05T02:26:41.671118Z","shell.execute_reply.started":"2025-08-05T02:26:20.452469Z","shell.execute_reply":"2025-08-05T02:26:41.670331Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"data.drop(['poutcome','contact'],axis =1 ,inplace = True)","metadata":{"_uuid":"76203fa5-136f-48fa-8252-ca2ac9ad3919","_cell_guid":"024fd39e-e0ca-4995-9c7b-8fd8d1b1d82f","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:41.673109Z","iopub.execute_input":"2025-08-05T02:26:41.673374Z","iopub.status.idle":"2025-08-05T02:26:41.772611Z","shell.execute_reply.started":"2025-08-05T02:26:41.673357Z","shell.execute_reply":"2025-08-05T02:26:41.77182Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"data.isnull().sum()","metadata":{"_uuid":"083b1866-fbb8-4138-8ee7-15b99e9de114","_cell_guid":"fbd92d38-4bf7-4889-b06a-d32bc435b6c3","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:41.773334Z","iopub.execute_input":"2025-08-05T02:26:41.773568Z","iopub.status.idle":"2025-08-05T02:26:42.078126Z","shell.execute_reply.started":"2025-08-05T02:26:41.773551Z","shell.execute_reply":"2025-08-05T02:26:42.07727Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"id                0\nage               0\njob               0\nmarital           0\neducation         0\ndefault           0\nbalance           0\nhousing           0\nloan              0\nday               0\nmonth             0\nduration          0\ncampaign          0\npdays             0\nprevious          0\ny            250000\ndtype: int64"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"data.info()","metadata":{"_uuid":"14ab4fed-6d7f-4f3a-92df-8a89056eaebf","_cell_guid":"580b5410-2e4e-4ae9-b671-055d4276800b","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:42.079015Z","iopub.execute_input":"2025-08-05T02:26:42.079248Z","iopub.status.idle":"2025-08-05T02:26:42.391359Z","shell.execute_reply.started":"2025-08-05T02:26:42.079229Z","shell.execute_reply":"2025-08-05T02:26:42.390774Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 1000000 entries, 0 to 249999\nData columns (total 16 columns):\n #   Column     Non-Null Count    Dtype  \n---  ------     --------------    -----  \n 0   id         1000000 non-null  int64  \n 1   age        1000000 non-null  int64  \n 2   job        1000000 non-null  object \n 3   marital    1000000 non-null  object \n 4   education  1000000 non-null  object \n 5   default    1000000 non-null  object \n 6   balance    1000000 non-null  int64  \n 7   housing    1000000 non-null  object \n 8   loan       1000000 non-null  object \n 9   day        1000000 non-null  int64  \n 10  month      1000000 non-null  object \n 11  duration   1000000 non-null  int64  \n 12  campaign   1000000 non-null  int64  \n 13  pdays      1000000 non-null  int64  \n 14  previous   1000000 non-null  int64  \n 15  y          750000 non-null   float64\ndtypes: float64(1), int64(8), object(7)\nmemory usage: 129.7+ MB\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"data.describe().T","metadata":{"_uuid":"ea52a2c1-e217-4daa-ab62-13e12ddcc489","_cell_guid":"98301415-86c5-4ab7-8bd7-33641ce7a6fb","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:42.392086Z","iopub.execute_input":"2025-08-05T02:26:42.392291Z","iopub.status.idle":"2025-08-05T02:26:42.670176Z","shell.execute_reply.started":"2025-08-05T02:26:42.392274Z","shell.execute_reply":"2025-08-05T02:26:42.669552Z"}},"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"              count           mean            std     min        25%  \\\nid        1000000.0  499999.500000  288675.278933     0.0  249999.75   \nage       1000000.0      40.927879      10.094523    18.0      33.00   \nbalance   1000000.0    1202.407136    2812.750998 -8019.0       0.00   \nday       1000000.0      16.116924       8.252748     1.0       9.00   \nduration  1000000.0     256.007423     272.268420     1.0      91.00   \ncampaign  1000000.0       2.576143       2.716302     1.0       1.00   \npdays     1000000.0      22.379557      77.219149    -1.0      -1.00   \nprevious  1000000.0       0.299841       1.348254     0.0       0.00   \ny          750000.0       0.120651       0.325721     0.0       0.00   \n\n               50%        75%       max  \nid        499999.5  749999.25  999999.0  \nage           39.0      48.00      95.0  \nbalance      634.0    1390.00   99717.0  \nday           17.0      21.00      31.0  \nduration     133.0     359.00    4918.0  \ncampaign       2.0       3.00      63.0  \npdays         -1.0      -1.00     871.0  \nprevious       0.0       0.00     200.0  \ny              0.0       0.00       1.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>id</th>\n      <td>1000000.0</td>\n      <td>499999.500000</td>\n      <td>288675.278933</td>\n      <td>0.0</td>\n      <td>249999.75</td>\n      <td>499999.5</td>\n      <td>749999.25</td>\n      <td>999999.0</td>\n    </tr>\n    <tr>\n      <th>age</th>\n      <td>1000000.0</td>\n      <td>40.927879</td>\n      <td>10.094523</td>\n      <td>18.0</td>\n      <td>33.00</td>\n      <td>39.0</td>\n      <td>48.00</td>\n      <td>95.0</td>\n    </tr>\n    <tr>\n      <th>balance</th>\n      <td>1000000.0</td>\n      <td>1202.407136</td>\n      <td>2812.750998</td>\n      <td>-8019.0</td>\n      <td>0.00</td>\n      <td>634.0</td>\n      <td>1390.00</td>\n      <td>99717.0</td>\n    </tr>\n    <tr>\n      <th>day</th>\n      <td>1000000.0</td>\n      <td>16.116924</td>\n      <td>8.252748</td>\n      <td>1.0</td>\n      <td>9.00</td>\n      <td>17.0</td>\n      <td>21.00</td>\n      <td>31.0</td>\n    </tr>\n    <tr>\n      <th>duration</th>\n      <td>1000000.0</td>\n      <td>256.007423</td>\n      <td>272.268420</td>\n      <td>1.0</td>\n      <td>91.00</td>\n      <td>133.0</td>\n      <td>359.00</td>\n      <td>4918.0</td>\n    </tr>\n    <tr>\n      <th>campaign</th>\n      <td>1000000.0</td>\n      <td>2.576143</td>\n      <td>2.716302</td>\n      <td>1.0</td>\n      <td>1.00</td>\n      <td>2.0</td>\n      <td>3.00</td>\n      <td>63.0</td>\n    </tr>\n    <tr>\n      <th>pdays</th>\n      <td>1000000.0</td>\n      <td>22.379557</td>\n      <td>77.219149</td>\n      <td>-1.0</td>\n      <td>-1.00</td>\n      <td>-1.0</td>\n      <td>-1.00</td>\n      <td>871.0</td>\n    </tr>\n    <tr>\n      <th>previous</th>\n      <td>1000000.0</td>\n      <td>0.299841</td>\n      <td>1.348254</td>\n      <td>0.0</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>0.00</td>\n      <td>200.0</td>\n    </tr>\n    <tr>\n      <th>y</th>\n      <td>750000.0</td>\n      <td>0.120651</td>\n      <td>0.325721</td>\n      <td>0.0</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>0.00</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"categorical_cols = data.select_dtypes(include=['object']).columns\ncategorical_cols","metadata":{"_uuid":"fd99166c-d1b6-4249-a973-3fe9c5360c0d","_cell_guid":"620e7ab7-407f-492d-aaca-3f0079b6b1a7","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:42.670847Z","iopub.execute_input":"2025-08-05T02:26:42.671387Z","iopub.status.idle":"2025-08-05T02:26:42.922487Z","shell.execute_reply.started":"2025-08-05T02:26:42.671359Z","shell.execute_reply":"2025-08-05T02:26:42.921847Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"Index(['job', 'marital', 'education', 'default', 'housing', 'loan', 'month'], dtype='object')"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"for i in categorical_cols :\n    print(i)\n    print(data[i].unique())\n    print('\\n')","metadata":{"_uuid":"8486e9f5-8008-402e-9aef-5de5ff2162da","_cell_guid":"9f665a05-442c-4fcc-a7b9-b6b4bd56ce88","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:42.92321Z","iopub.execute_input":"2025-08-05T02:26:42.923461Z","iopub.status.idle":"2025-08-05T02:26:43.209Z","shell.execute_reply.started":"2025-08-05T02:26:42.923439Z","shell.execute_reply":"2025-08-05T02:26:43.208404Z"}},"outputs":[{"name":"stdout","text":"job\n['technician' 'blue-collar' 'student' 'admin.' 'management' 'entrepreneur'\n 'self-employed' 'unknown' 'services' 'retired' 'housemaid' 'unemployed']\n\n\nmarital\n['married' 'single' 'divorced']\n\n\neducation\n['secondary' 'primary' 'tertiary' 'unknown']\n\n\ndefault\n['no' 'yes']\n\n\nhousing\n['no' 'yes']\n\n\nloan\n['no' 'yes']\n\n\nmonth\n['aug' 'jun' 'may' 'feb' 'apr' 'nov' 'jul' 'jan' 'oct' 'mar' 'sep' 'dec']\n\n\n","output_type":"stream"}],"execution_count":15},{"cell_type":"markdown","source":"<div style=\"\n  border-top: 4px solid #A970FF;\n  padding: 16px 20px;\n  background-color: #1a1a1a;\n  color: white;\n  border-radius: 8px;\n  font-family: 'Segoe UI', sans-serif;\n  line-height: 1.6;\n\">\n  <h3 style=\"color: #A970FF; margin-top: 0;\"> ðŸ”¹ Outliers Detection </h3>\n  <ul style=\"padding-left: 18px; margin: 10px 0;\">\n    \n  </ul>\n</div>","metadata":{"_uuid":"ba7fdcf6-f50d-41a9-b23e-aace42ad6a2e","_cell_guid":"60ae24e1-77bb-4a7b-8137-2d47da28c99f","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"sns.boxplot(x = 'balance',data=data_tr)","metadata":{"_uuid":"2d94faca-4455-4949-a445-52c63fece27e","_cell_guid":"3c6ed2b2-861f-484d-8a18-143105dc9798","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:43.209738Z","iopub.execute_input":"2025-08-05T02:26:43.210011Z","iopub.status.idle":"2025-08-05T02:26:43.517003Z","shell.execute_reply.started":"2025-08-05T02:26:43.209986Z","shell.execute_reply":"2025-08-05T02:26:43.516396Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='balance'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":16},{"cell_type":"markdown","source":"<div style=\"\n  border-top: 4px solid #A970FF;\n  padding: 16px 20px;\n  background-color: #1a1a1a;\n  color: white;\n  border-radius: 8px;\n  font-family: 'Segoe UI', sans-serif;\n  line-height: 1.6;\n\">\n  <h3 style=\"color: #A970FF; margin-top: 0;\"> ðŸ”¹ Encoding </h3>\n  <ul style=\"padding-left: 18px; margin: 10px 0;\">\n    \n  </ul>\n</div>","metadata":{"_uuid":"736f0854-1765-4e7c-adc3-1c5d4dadaaa2","_cell_guid":"7d424b38-504d-4c4d-883f-c880b2e9a1aa","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"encoder = OrdinalEncoder()\n\ndata[categorical_cols] = encoder.fit_transform(data[categorical_cols])\n#data.drop(categorical_cols,inplace=True,axis=1)\ndata","metadata":{"_uuid":"da61c70f-e984-45a2-80c4-e6126607fddb","_cell_guid":"b620039e-9b69-4c73-a978-b1c16b91da0d","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:43.517693Z","iopub.execute_input":"2025-08-05T02:26:43.517929Z","iopub.status.idle":"2025-08-05T02:26:44.98382Z","shell.execute_reply.started":"2025-08-05T02:26:43.517903Z","shell.execute_reply":"2025-08-05T02:26:44.983164Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"            id  age  job  marital  education  default  balance  housing  loan  \\\n0            0   42  9.0      1.0        1.0      0.0        7      0.0   0.0   \n1            1   38  1.0      1.0        1.0      0.0      514      0.0   0.0   \n2            2   36  1.0      1.0        1.0      0.0      602      1.0   0.0   \n3            3   27  8.0      2.0        1.0      0.0       34      1.0   0.0   \n4            4   26  9.0      1.0        1.0      0.0      889      1.0   0.0   \n...        ...  ...  ...      ...        ...      ...      ...      ...   ...   \n249995  999995   43  4.0      1.0        2.0      0.0        0      1.0   0.0   \n249996  999996   40  7.0      1.0        3.0      0.0      522      1.0   0.0   \n249997  999997   63  5.0      1.0        0.0      0.0       33      0.0   0.0   \n249998  999998   50  1.0      1.0        0.0      0.0     2629      1.0   0.0   \n249999  999999   29  8.0      2.0        2.0      0.0      722      0.0   0.0   \n\n        day  month  duration  campaign  pdays  previous    y  \n0        25    1.0       117         3     -1         0  0.0  \n1        18    6.0       185         1     -1         0  0.0  \n2        14    8.0       111         2     -1         0  0.0  \n3        28    8.0        10         2     -1         0  0.0  \n4         3    3.0       902         1     -1         0  1.0  \n...     ...    ...       ...       ...    ...       ...  ...  \n249995   18    9.0        65         2     -1         0  NaN  \n249996   19    9.0       531         1    189         1  NaN  \n249997    3    5.0       178         1     92         8  NaN  \n249998   30    8.0       163         2     -1         0  NaN  \n249999    6    0.0       119         1     -1         0  NaN  \n\n[1000000 rows x 16 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>age</th>\n      <th>job</th>\n      <th>marital</th>\n      <th>education</th>\n      <th>default</th>\n      <th>balance</th>\n      <th>housing</th>\n      <th>loan</th>\n      <th>day</th>\n      <th>month</th>\n      <th>duration</th>\n      <th>campaign</th>\n      <th>pdays</th>\n      <th>previous</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>42</td>\n      <td>9.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>7</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>25</td>\n      <td>1.0</td>\n      <td>117</td>\n      <td>3</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>38</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>514</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>18</td>\n      <td>6.0</td>\n      <td>185</td>\n      <td>1</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>36</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>602</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>14</td>\n      <td>8.0</td>\n      <td>111</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>27</td>\n      <td>8.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>34</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>28</td>\n      <td>8.0</td>\n      <td>10</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>26</td>\n      <td>9.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>889</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>3.0</td>\n      <td>902</td>\n      <td>1</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>249995</th>\n      <td>999995</td>\n      <td>43</td>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>18</td>\n      <td>9.0</td>\n      <td>65</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>249996</th>\n      <td>999996</td>\n      <td>40</td>\n      <td>7.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>522</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>19</td>\n      <td>9.0</td>\n      <td>531</td>\n      <td>1</td>\n      <td>189</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>249997</th>\n      <td>999997</td>\n      <td>63</td>\n      <td>5.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>33</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>5.0</td>\n      <td>178</td>\n      <td>1</td>\n      <td>92</td>\n      <td>8</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>249998</th>\n      <td>999998</td>\n      <td>50</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2629</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>30</td>\n      <td>8.0</td>\n      <td>163</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>249999</th>\n      <td>999999</td>\n      <td>29</td>\n      <td>8.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>722</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>6</td>\n      <td>0.0</td>\n      <td>119</td>\n      <td>1</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>1000000 rows Ã— 16 columns</p>\n</div>"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"# encoder = OneHotEncoder(drop = 'first')\n\n# data[encoder.get_feature_names_out()] = pd.DataFrame(encoder.fit_transform(data[categorical_cols]).toarray(),columns = encoder.get_feature_names_out())\n# data.drop(categorical_cols,axis=1,inplace=True)","metadata":{"_uuid":"0a79bf8c-ade0-4fb2-b77b-64e6560a0df3","_cell_guid":"ecb59147-36d4-4f18-a32e-5a60d85b5692","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:44.986102Z","iopub.execute_input":"2025-08-05T02:26:44.986445Z","iopub.status.idle":"2025-08-05T02:26:44.989392Z","shell.execute_reply.started":"2025-08-05T02:26:44.986428Z","shell.execute_reply":"2025-08-05T02:26:44.988682Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"data.head()","metadata":{"_uuid":"42bd062f-1c82-476a-9a42-4e7b2b0aa511","_cell_guid":"d2c300bc-9121-4dcb-a127-22617d6c945c","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:44.990166Z","iopub.execute_input":"2025-08-05T02:26:44.9904Z","iopub.status.idle":"2025-08-05T02:26:45.014188Z","shell.execute_reply.started":"2025-08-05T02:26:44.990384Z","shell.execute_reply":"2025-08-05T02:26:45.013483Z"}},"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"   id  age  job  marital  education  default  balance  housing  loan  day  \\\n0   0   42  9.0      1.0        1.0      0.0        7      0.0   0.0   25   \n1   1   38  1.0      1.0        1.0      0.0      514      0.0   0.0   18   \n2   2   36  1.0      1.0        1.0      0.0      602      1.0   0.0   14   \n3   3   27  8.0      2.0        1.0      0.0       34      1.0   0.0   28   \n4   4   26  9.0      1.0        1.0      0.0      889      1.0   0.0    3   \n\n   month  duration  campaign  pdays  previous    y  \n0    1.0       117         3     -1         0  0.0  \n1    6.0       185         1     -1         0  0.0  \n2    8.0       111         2     -1         0  0.0  \n3    8.0        10         2     -1         0  0.0  \n4    3.0       902         1     -1         0  1.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>age</th>\n      <th>job</th>\n      <th>marital</th>\n      <th>education</th>\n      <th>default</th>\n      <th>balance</th>\n      <th>housing</th>\n      <th>loan</th>\n      <th>day</th>\n      <th>month</th>\n      <th>duration</th>\n      <th>campaign</th>\n      <th>pdays</th>\n      <th>previous</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>42</td>\n      <td>9.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>7</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>25</td>\n      <td>1.0</td>\n      <td>117</td>\n      <td>3</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>38</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>514</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>18</td>\n      <td>6.0</td>\n      <td>185</td>\n      <td>1</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>36</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>602</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>14</td>\n      <td>8.0</td>\n      <td>111</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>27</td>\n      <td>8.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>34</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>28</td>\n      <td>8.0</td>\n      <td>10</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>26</td>\n      <td>9.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>889</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>3.0</td>\n      <td>902</td>\n      <td>1</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":19},{"cell_type":"markdown","source":"<div style=\"\n  border-top: 4px solid #A970FF;\n  padding: 16px 20px;\n  background-color: #1a1a1a;\n  color: white;\n  border-radius: 8px;\n  font-family: 'Segoe UI', sans-serif;\n  line-height: 1.6;\n\">\n  <h3 style=\"color: #A970FF; margin-top: 0;\"> ðŸ”¹ Splitting Data </h3>\n  <ul style=\"padding-left: 18px; margin: 10px 0;\">\n    \n  </ul>\n</div>","metadata":{"_uuid":"f6b0fc9d-56ac-4dfc-9285-6c8c8edf2ac2","_cell_guid":"200af48c-fd25-4bfa-9d79-19e5b05b68d2","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"data_te=data[data['y'].isnull()]\ndata_tr=data[~data['y'].isnull()]","metadata":{"_uuid":"df8b21a1-324a-46c1-aa9d-9224d12297e8","_cell_guid":"9e6bf15b-811a-4cd8-af21-1311f77e54b5","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:45.01501Z","iopub.execute_input":"2025-08-05T02:26:45.01525Z","iopub.status.idle":"2025-08-05T02:26:45.106385Z","shell.execute_reply.started":"2025-08-05T02:26:45.015229Z","shell.execute_reply":"2025-08-05T02:26:45.105814Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"data_tr.head(3)","metadata":{"_uuid":"3081b62b-833f-4fec-bc7f-356bf4c19b67","_cell_guid":"f96fb9a7-2c1d-464a-95e7-1a96b7bd72ab","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:45.107051Z","iopub.execute_input":"2025-08-05T02:26:45.10724Z","iopub.status.idle":"2025-08-05T02:26:45.119965Z","shell.execute_reply.started":"2025-08-05T02:26:45.107225Z","shell.execute_reply":"2025-08-05T02:26:45.119114Z"}},"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"   id  age  job  marital  education  default  balance  housing  loan  day  \\\n0   0   42  9.0      1.0        1.0      0.0        7      0.0   0.0   25   \n1   1   38  1.0      1.0        1.0      0.0      514      0.0   0.0   18   \n2   2   36  1.0      1.0        1.0      0.0      602      1.0   0.0   14   \n\n   month  duration  campaign  pdays  previous    y  \n0    1.0       117         3     -1         0  0.0  \n1    6.0       185         1     -1         0  0.0  \n2    8.0       111         2     -1         0  0.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>age</th>\n      <th>job</th>\n      <th>marital</th>\n      <th>education</th>\n      <th>default</th>\n      <th>balance</th>\n      <th>housing</th>\n      <th>loan</th>\n      <th>day</th>\n      <th>month</th>\n      <th>duration</th>\n      <th>campaign</th>\n      <th>pdays</th>\n      <th>previous</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>42</td>\n      <td>9.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>7</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>25</td>\n      <td>1.0</td>\n      <td>117</td>\n      <td>3</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>38</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>514</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>18</td>\n      <td>6.0</td>\n      <td>185</td>\n      <td>1</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>36</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>602</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>14</td>\n      <td>8.0</td>\n      <td>111</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"data_tr.shape","metadata":{"_uuid":"3cb12fc2-5c33-4d0d-8ef1-3118209c22b5","_cell_guid":"3f32d07d-fb04-4361-bec7-1e257911b591","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:45.120761Z","iopub.execute_input":"2025-08-05T02:26:45.120974Z","iopub.status.idle":"2025-08-05T02:26:45.147014Z","shell.execute_reply.started":"2025-08-05T02:26:45.120958Z","shell.execute_reply":"2025-08-05T02:26:45.146466Z"}},"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"(750000, 16)"},"metadata":{}}],"execution_count":22},{"cell_type":"code","source":"data_te.drop('y',axis = 1,inplace = True)\ndata_te.head(3)","metadata":{"_uuid":"b9b90287-37b3-4efd-a7b7-8a9bbefcfc42","_cell_guid":"8d3bb3f0-8ce2-4d37-84b4-7006527b4204","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:45.147644Z","iopub.execute_input":"2025-08-05T02:26:45.147897Z","iopub.status.idle":"2025-08-05T02:26:45.191988Z","shell.execute_reply.started":"2025-08-05T02:26:45.147874Z","shell.execute_reply":"2025-08-05T02:26:45.191431Z"}},"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"       id  age  job  marital  education  default  balance  housing  loan  day  \\\n0  750000   32  1.0      1.0        1.0      0.0     1397      1.0   0.0   21   \n1  750001   44  4.0      1.0        2.0      0.0       23      1.0   0.0    3   \n2  750002   36  6.0      1.0        0.0      0.0       46      1.0   1.0   13   \n\n   month  duration  campaign  pdays  previous  \n0    8.0       224         1     -1         0  \n1    0.0       586         2     -1         0  \n2    8.0       111         2     -1         0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>age</th>\n      <th>job</th>\n      <th>marital</th>\n      <th>education</th>\n      <th>default</th>\n      <th>balance</th>\n      <th>housing</th>\n      <th>loan</th>\n      <th>day</th>\n      <th>month</th>\n      <th>duration</th>\n      <th>campaign</th>\n      <th>pdays</th>\n      <th>previous</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>750000</td>\n      <td>32</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1397</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>21</td>\n      <td>8.0</td>\n      <td>224</td>\n      <td>1</td>\n      <td>-1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>750001</td>\n      <td>44</td>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>23</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>3</td>\n      <td>0.0</td>\n      <td>586</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>750002</td>\n      <td>36</td>\n      <td>6.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>46</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>13</td>\n      <td>8.0</td>\n      <td>111</td>\n      <td>2</td>\n      <td>-1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"data_te.shape","metadata":{"_uuid":"1fd71528-8d65-4b3e-ac9a-d07c51d31d3c","_cell_guid":"a702397d-0d8c-4ec7-9484-a8add71aa1fc","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:45.192606Z","iopub.execute_input":"2025-08-05T02:26:45.192801Z","iopub.status.idle":"2025-08-05T02:26:45.197136Z","shell.execute_reply.started":"2025-08-05T02:26:45.192786Z","shell.execute_reply":"2025-08-05T02:26:45.196534Z"}},"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"(250000, 15)"},"metadata":{}}],"execution_count":24},{"cell_type":"code","source":"X = data_tr.drop('y',axis = 1)\ny = data_tr['y']\n\nX.shape , y.shape","metadata":{"_uuid":"6ed4a16b-eea0-41a9-aa76-ad2784a82344","_cell_guid":"0a170eff-6317-484f-ba95-e005dd0fba38","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:45.197752Z","iopub.execute_input":"2025-08-05T02:26:45.198041Z","iopub.status.idle":"2025-08-05T02:26:45.255248Z","shell.execute_reply.started":"2025-08-05T02:26:45.198018Z","shell.execute_reply":"2025-08-05T02:26:45.254676Z"}},"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"((750000, 15), (750000,))"},"metadata":{}}],"execution_count":25},{"cell_type":"code","source":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=42,stratify=y)","metadata":{"_uuid":"e251b2c7-6fc9-493b-a661-19056474bfac","_cell_guid":"5fbbac09-5a60-4cc7-a0f3-166e2a278bc2","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:45.255952Z","iopub.execute_input":"2025-08-05T02:26:45.256225Z","iopub.status.idle":"2025-08-05T02:26:45.671182Z","shell.execute_reply.started":"2025-08-05T02:26:45.2562Z","shell.execute_reply":"2025-08-05T02:26:45.670406Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"X_train, X_valid, y_train, y_valid = train_test_split(\n    X, y, test_size=0.2, stratify=y, random_state=42\n)","metadata":{"_uuid":"445474d9-ab27-45cf-847f-348ff64ea56b","_cell_guid":"1dd3e5a3-cf0e-4566-aefa-ce8f0d5ff30d","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:45.672073Z","iopub.execute_input":"2025-08-05T02:26:45.672339Z","iopub.status.idle":"2025-08-05T02:26:46.095137Z","shell.execute_reply.started":"2025-08-05T02:26:45.672316Z","shell.execute_reply":"2025-08-05T02:26:46.094548Z"}},"outputs":[],"execution_count":27},{"cell_type":"markdown","source":"<div style=\"\n  border-top: 4px solid #A970FF;\n  padding: 16px 20px;\n  background-color: #1a1a1a;\n  color: white;\n  border-radius: 8px;\n  font-family: 'Segoe UI', sans-serif;\n  line-height: 1.6;\n\">\n  <h3 style=\"color: #A970FF; margin-top: 0;\"> ðŸ”¹ Hyper Tuning </h3>\n  <ul style=\"padding-left: 18px; margin: 10px 0;\">\n    \n  </ul>\n</div>","metadata":{"_uuid":"5fb4ad59-8e76-4f2c-8180-e24cca3358b6","_cell_guid":"26e8c8bd-5805-4a99-9094-9bb500a3e779","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# def objective_xgb(trial):\n#     params_xgb = {\n#         \"learning_rate\": trial.suggest_float(\"learning_rate\", 0.01, 0.3),\n#         \"max_depth\": trial.suggest_int(\"max_depth\", 5, 15),\n#         \"min_child_weight\": trial.suggest_int(\"min_child_weight\", 1, 10),\n#         \"gamma\": trial.suggest_float(\"gamma\", 0, 5),\n#         \"subsample\": trial.suggest_float(\"subsample\", 0.5, 1.0),\n#         \"colsample_bytree\": trial.suggest_float(\"colsample_bytree\", 0.5, 1.0),\n#         \"reg_lambda\": trial.suggest_float(\"reg_lambda\", 1, 10),\n#         \"reg_alpha\": trial.suggest_float(\"reg_alpha\", 0, 1),\n#         \"scale_pos_weight\": trial.suggest_int(\"scale_pos_weight\", 1, 5),\n#         \"n_estimators\": 1000,\n#         \"objective\": \"binary:logistic\",\n#         \"eval_metric\": \"auc\",\n#         \"n_jobs\": -1,\n#         \"random_state\": 42\n#     }\n\n#     model_xgb = XGBClassifier(**params_xgb)\n#     skf = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\n#     scores = cross_val_score(model_xgb, X, y, scoring='roc_auc', cv=skf, n_jobs=-1)\n\n#     return scores.mean()","metadata":{"_uuid":"413458a3-0ddd-45b5-ade4-fbf68b354c16","_cell_guid":"022d08ba-358d-4a50-ab01-74fd082861b9","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:51.211574Z","iopub.execute_input":"2025-08-05T02:26:51.21213Z","iopub.status.idle":"2025-08-05T02:26:51.215891Z","shell.execute_reply.started":"2025-08-05T02:26:51.212107Z","shell.execute_reply":"2025-08-05T02:26:51.215068Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"# study_xgb = optuna.create_study(direction=\"maximize\")\n# study_xgb.optimize(objective_xgb, n_trials=60,show_progress_bar=True)\n# optuna.logging.set_verbosity(optuna.logging.INFO)\n\n# print(study_xgb.best_params)","metadata":{"_uuid":"721cc530-89eb-4bc9-9601-24fb544f5d27","_cell_guid":"4df16823-afc5-4b5e-b8b3-2a3cb02c438a","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:51.451389Z","iopub.execute_input":"2025-08-05T02:26:51.451997Z","iopub.status.idle":"2025-08-05T02:26:51.454977Z","shell.execute_reply.started":"2025-08-05T02:26:51.451975Z","shell.execute_reply":"2025-08-05T02:26:51.454256Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"# print(\"Best AUC:\", study_xgb.best_value)\n# print(\"Best Parameters:\")\n# print(study_xgb.best_params)","metadata":{"_uuid":"637afb7f-8f48-4c1f-8e71-cb3a5b77ccec","_cell_guid":"69381a37-5cd4-4004-9412-b9bc047803eb","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:51.69595Z","iopub.execute_input":"2025-08-05T02:26:51.696208Z","iopub.status.idle":"2025-08-05T02:26:51.699655Z","shell.execute_reply.started":"2025-08-05T02:26:51.696187Z","shell.execute_reply":"2025-08-05T02:26:51.698893Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"# optuna.visualization.plot_optimization_history(study_xgb)","metadata":{"_uuid":"71209db1-56c6-4a74-bb3c-b7e1836e5320","_cell_guid":"2a6a1726-1608-4e19-aaae-8828b1044d5b","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:51.819902Z","iopub.execute_input":"2025-08-05T02:26:51.820137Z","iopub.status.idle":"2025-08-05T02:26:51.823395Z","shell.execute_reply.started":"2025-08-05T02:26:51.820121Z","shell.execute_reply":"2025-08-05T02:26:51.822863Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"# LGBMClassifier\n\ndef objective_lgbm(trial):\n    params_lgbm = {\n        \"learning_rate\": trial.suggest_float(\"learning_rate\", 0.01, 0.3),\n        \"max_depth\": trial.suggest_int(\"max_depth\", 5, 15),\n        \"min_child_weight\": trial.suggest_int(\"min_child_weight\", 1, 10),  \n        \"subsample\": trial.suggest_float(\"subsample\", 0.5, 1.0),\n        \"colsample_bytree\": trial.suggest_float(\"colsample_bytree\", 0.5, 1.0),\n        \"reg_lambda\": trial.suggest_float(\"reg_lambda\", 1, 10),\n        \"reg_alpha\": trial.suggest_float(\"reg_alpha\", 0, 1),\n        \"scale_pos_weight\": trial.suggest_int(\"scale_pos_weight\", 1, 5),\n        \"n_estimators\": 1000,\n        \"objective\": \"binary\",\n        \"boosting_type\": \"gbdt\",\n        \"n_jobs\": -1,\n        \"random_state\": 42\n    }\n\n    model_lgb = LGBMClassifier(**params_lgbm)\n\n    skf = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\n    scores = cross_val_score(model_lgb, X, y, scoring='roc_auc', cv=skf, n_jobs=-1)\n\n    return scores.mean()","metadata":{"_uuid":"627c8420-04d9-4efe-9d7e-100ee9556990","_cell_guid":"5b6bfffe-e4af-4bb4-ba1d-681fb8f4e6ff","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:26:52.707479Z","iopub.execute_input":"2025-08-05T02:26:52.708076Z","iopub.status.idle":"2025-08-05T02:26:52.713765Z","shell.execute_reply.started":"2025-08-05T02:26:52.708054Z","shell.execute_reply":"2025-08-05T02:26:52.712992Z"}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"optuna.logging.set_verbosity(optuna.logging.INFO)\n\nstudy_lgbm = optuna.create_study(direction=\"maximize\")\nstudy_lgbm.optimize(objective_lgbm, n_trials=10,show_progress_bar=True)\n\nprint(study_lgbm.best_params)","metadata":{"_uuid":"03bb78e0-1e42-4e00-bf22-8588e3638cff","_cell_guid":"3eb51535-6729-4e5b-8492-f72edc2ff510","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-05T02:28:40.841703Z","iopub.execute_input":"2025-08-05T02:28:40.842405Z","iopub.status.idle":"2025-08-05T02:28:42.415481Z","shell.execute_reply.started":"2025-08-05T02:28:40.842379Z","shell.execute_reply":"2025-08-05T02:28:42.414545Z"}},"outputs":[{"name":"stderr","text":"[I 2025-08-05 02:28:40,843] A new study created in memory with name: no-name-913f51af-d769-4081-9568-7820727046d0\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/10 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"de1d6ab69cda4f94bdae261634724d46"}},"metadata":{}},{"name":"stdout","text":"[W 2025-08-05 02:28:42,387] Trial 0 failed with parameters: {'learning_rate': 0.23348732862319338, 'max_depth': 15, 'min_child_weight': 2, 'subsample': 0.6787758879616028, 'colsample_bytree': 0.7746291076721832, 'reg_lambda': 6.712741033423793, 'reg_alpha': 0.1871177066324342, 'scale_pos_weight': 5} because of the following error: KeyboardInterrupt().\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/dist-packages/optuna/study/_optimize.py\", line 201, in _run_trial\n    value_or_values = func(trial)\n                      ^^^^^^^^^^^\n  File \"/tmp/ipykernel_36/100732706.py\", line 29, in objective_lgbm\n    scores = cross_val_score(model_lgb, X, y, scoring='roc_auc', cv=skf, n_jobs=-1)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 515, in cross_val_score\n    cv_results = cross_validate(\n                 ^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 266, in cross_validate\n    results = parallel(\n              ^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/parallel.py\", line 63, in __call__\n    return super().__call__(iterable_with_config)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/joblib/parallel.py\", line 2072, in __call__\n    return output if self.return_generator else list(output)\n                                                ^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/joblib/parallel.py\", line 1682, in _get_outputs\n    yield from self._retrieve()\n  File \"/usr/local/lib/python3.11/dist-packages/joblib/parallel.py\", line 1800, in _retrieve\n    time.sleep(0.01)\nKeyboardInterrupt\n[W 2025-08-05 02:28:42,389] Trial 0 failed with value None.\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/855059827.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mstudy_lgbm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0moptuna\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcreate_study\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdirection\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"maximize\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mstudy_lgbm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptimize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobjective_lgbm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_trials\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mshow_progress_bar\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstudy_lgbm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/optuna/study/study.py\u001b[0m in \u001b[0;36moptimize\u001b[0;34m(self, func, n_trials, timeout, n_jobs, catch, callbacks, gc_after_trial, show_progress_bar)\u001b[0m\n\u001b[1;32m    487\u001b[0m                 \u001b[0mIf\u001b[0m \u001b[0mnested\u001b[0m \u001b[0minvocation\u001b[0m \u001b[0mof\u001b[0m \u001b[0mthis\u001b[0m \u001b[0mmethod\u001b[0m \u001b[0moccurs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    488\u001b[0m         \"\"\"\n\u001b[0;32m--> 489\u001b[0;31m         _optimize(\n\u001b[0m\u001b[1;32m    490\u001b[0m             \u001b[0mstudy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    491\u001b[0m             \u001b[0mfunc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/optuna/study/_optimize.py\u001b[0m in \u001b[0;36m_optimize\u001b[0;34m(study, func, n_trials, timeout, n_jobs, catch, callbacks, gc_after_trial, show_progress_bar)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mn_jobs\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m             _optimize_sequential(\n\u001b[0m\u001b[1;32m     65\u001b[0m                 \u001b[0mstudy\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m                 \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/optuna/study/_optimize.py\u001b[0m in \u001b[0;36m_optimize_sequential\u001b[0;34m(study, func, n_trials, timeout, catch, callbacks, gc_after_trial, reseed_sampler_rng, time_start, progress_bar)\u001b[0m\n\u001b[1;32m    159\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    160\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 161\u001b[0;31m             \u001b[0mfrozen_trial\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_run_trial\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstudy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcatch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    162\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    163\u001b[0m             \u001b[0;31m# The following line mitigates memory problems that can be occurred in some\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/optuna/study/_optimize.py\u001b[0m in \u001b[0;36m_run_trial\u001b[0;34m(study, func, catch)\u001b[0m\n\u001b[1;32m    251\u001b[0m         \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc_err\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcatch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    252\u001b[0m     ):\n\u001b[0;32m--> 253\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mfunc_err\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    254\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mfrozen_trial\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    255\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/optuna/study/_optimize.py\u001b[0m in \u001b[0;36m_run_trial\u001b[0;34m(study, func, catch)\u001b[0m\n\u001b[1;32m    199\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mget_heartbeat_thread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrial\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_trial_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstudy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_storage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    200\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 201\u001b[0;31m             \u001b[0mvalue_or_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrial\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    202\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mexceptions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTrialPruned\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    203\u001b[0m             \u001b[0;31m# TODO(mamu): Handle multi-objective cases.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipykernel_36/100732706.py\u001b[0m in \u001b[0;36mobjective_lgbm\u001b[0;34m(trial)\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0mskf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mStratifiedKFold\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_splits\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m     \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcross_val_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_lgb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'roc_auc'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mskf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mscores\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36mcross_val_score\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, error_score)\u001b[0m\n\u001b[1;32m    513\u001b[0m     \u001b[0mscorer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_scoring\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mscoring\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    514\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 515\u001b[0;31m     cv_results = cross_validate(\n\u001b[0m\u001b[1;32m    516\u001b[0m         \u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    517\u001b[0m         \u001b[0mX\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36mcross_validate\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, return_train_score, return_estimator, error_score)\u001b[0m\n\u001b[1;32m    264\u001b[0m     \u001b[0;31m# independent, and that it is pickle-able.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m     \u001b[0mparallel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mParallel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpre_dispatch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpre_dispatch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 266\u001b[0;31m     results = parallel(\n\u001b[0m\u001b[1;32m    267\u001b[0m         delayed(_fit_and_score)(\n\u001b[1;32m    268\u001b[0m             \u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         )\n\u001b[0;32m---> 63\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   2070\u001b[0m         \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2071\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2072\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0moutput\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturn_generator\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2073\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2074\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__repr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_get_outputs\u001b[0;34m(self, iterator, pre_dispatch)\u001b[0m\n\u001b[1;32m   1680\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1681\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1682\u001b[0;31m                 \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1683\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1684\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mGeneratorExit\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_retrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1798\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mTASK_PENDING\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1799\u001b[0m                 ):\n\u001b[0;32m-> 1800\u001b[0;31m                     \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.01\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1801\u001b[0m                     \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1802\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}],"execution_count":34},{"cell_type":"code","source":"print(\"Best AUC:\", study_lgbm.best_value)\nprint(\"Best Parameters:\")\nprint(study_lgbm.best_params)","metadata":{"_uuid":"e79b4dd2-a93e-4ac3-bcbc-96f890f91da9","_cell_guid":"ee89dc13-848f-490d-8d4b-666029022300","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"execution_failed":"2025-08-05T02:18:31.119Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"optuna.visualization.plot_optimization_history(study_lgbm)","metadata":{"_uuid":"2afb00f8-b5b4-406f-9349-8b9e94ca811d","_cell_guid":"7fc28101-cd0f-4598-93d2-faab3e1bf110","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"execution_failed":"2025-08-05T02:18:31.119Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"optuna.visualization.plot_parallel_coordinate(study_lgbm)","metadata":{"_uuid":"0fd5d4b5-2326-4fc9-9968-085a3f061937","_cell_guid":"38800363-55de-4d30-ab1b-6382eec1d30f","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"execution_failed":"2025-08-05T02:18:31.119Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"optuna.visualization.plot_slice(study_lgbm,params=['learning_rate','max_depth','min_child_weight','subsample'])","metadata":{"_uuid":"a2ca25f4-0208-4bbd-bde4-fa6c37a53643","_cell_guid":"24e1d99a-185e-4929-8be4-9d905d068c2b","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"execution_failed":"2025-08-05T02:18:31.119Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"optuna.visualization.plot_param_importances(study_lgbm)","metadata":{"_uuid":"92efefcf-e794-43c6-8269-4cbde532681c","_cell_guid":"7f64b4bf-3a12-4d96-a25c-966984c45742","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"execution_failed":"2025-08-05T02:18:31.119Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# #CatBoostClassifier\n\n# def objective_cat(trial):\n#     params = {\n#         \"iterations\": 300,  \n#         \"learning_rate\": trial.suggest_float(\"learning_rate\", 0.02, 0.2),\n#         \"depth\": trial.suggest_int(\"depth\", 4, 10),\n#         \"l2_leaf_reg\": trial.suggest_float(\"l2_leaf_reg\", 1, 5),\n#         \"bagging_temperature\": trial.suggest_float(\"bagging_temperature\", 0, 1),\n#         \"random_strength\": trial.suggest_float(\"random_strength\", 1, 10),\n#         \"scale_pos_weight\": trial.suggest_float(\"scale_pos_weight\", 1, 5),\n#         \"loss_function\": \"Logloss\",\n#         \"eval_metric\": \"AUC\",\n#         \"task_type\": \"CPU\",\n#         \"random_seed\": 42,\n#         \"verbose\": 0\n#     }\n\n#     model = CatBoostClassifier(**params)\n\n#     skf = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\n#     auc_scores = []\n\n#     for train_idx, val_idx in skf.split(X, y):\n#         X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n#         y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n\n#         model.fit(X_train, y_train,\n#                   eval_set=(X_val, y_val),\n#                   early_stopping_rounds=15,\n#                   verbose=0)\n\n#         preds = model.predict_proba(X_val)[:, 1]\n#         auc = roc_auc_score(y_val, preds)\n#         auc_scores.append(auc)\n\n#     return np.mean(auc_scores)","metadata":{"_uuid":"d03fd1cf-87fc-43a0-9918-613960579746","_cell_guid":"b62e20f1-c7e0-40a8-b380-2bde8263c2df","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"execution_failed":"2025-08-05T02:18:31.119Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# study_cat = optuna.create_study(direction=\"maximize\")\n# study_cat.optimize(objective_cat, n_trials=30,show_progress_bar=True)\n# optuna.logging.set_verbosity(optuna.logging.INFO)\n\n# print(study_cat.best_params)","metadata":{"_uuid":"7bcf145f-4620-4cc4-bae0-f7a69c69078d","_cell_guid":"9d39d291-8154-4677-9f62-1d2a403da8f0","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"execution_failed":"2025-08-05T02:18:31.119Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# print(\"Best AUC:\", study_cat.best_value)\n# print(\"Best Parameters:\")\n# print(study_cat.best_params)","metadata":{"_uuid":"7b64e98a-f194-4f03-97b5-1bf831224459","_cell_guid":"fec2aa67-d03a-4f46-bd9e-d09ecdb64882","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"execution_failed":"2025-08-05T02:18:31.119Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# optuna.visualization.plot_optimization_history(study_cat)","metadata":{"_uuid":"72bb7ab1-f342-4bb7-83b1-b0166654548d","_cell_guid":"87c00053-4ab4-4fd3-b6f3-4da470fc7428","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"execution_failed":"2025-08-05T02:18:31.119Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"\n  border-top: 4px solid #A970FF;\n  padding: 16px 20px;\n  background-color: #1a1a1a;\n  color: white;\n  border-radius: 8px;\n  font-family: 'Segoe UI', sans-serif;\n  line-height: 1.6;\n\">\n  <h3 style=\"color: #A970FF; margin-top: 0;\"> ðŸ”¹ Model Training </h3>\n  <ul style=\"padding-left: 18px; margin: 10px 0;\">\n    \n  </ul>\n</div>","metadata":{"_uuid":"a026f241-944d-4b9a-b081-3352e6f4286a","_cell_guid":"ccd6e053-8a6b-4abd-81cc-d7f075cf7472","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# --- Best parameters for XGBoost ---\n\n# Best AUC: 0.9658946627074059\n# Best Parameters:\n# {'learning_rate': 0.02397985537156955, 'max_depth': 15, 'min_child_weight': 8, 'gamma': 0.6280818324265819, \n# 'subsample': 0.9293528161387496, 'colsample_bytree': 0.5021162296258401, 'reg_lambda': 9.97647162591141, \n# 'reg_alpha': 0.5337726666739991, 'scale_pos_weight': 1}\n\nbest_params_xgb = {\n    'tree_method': 'hist',\n    'grow_policy': 'lossguide',\n    'learning_rate': 0.02397985537156955,\n    'max_depth': 15,\n    'min_child_weight': 8,\n    'gamma': 0.6280818324265819,\n    'subsample': 0.9293528161387496,\n    'colsample_bytree': 0.5021162296258401,\n    'reg_lambda': 9.97647162591141,\n    'reg_alpha': 0.5337726666739991,\n    'scale_pos_weight': 7.3,\n    'n_estimators': 10000,\n    'n_jobs': -1,\n    'use_label_encoder': False,\n    'random_state': 42\n}\n\n# --- Best parameters for LightGBM ---\n\n# Best AUC: 0.9660675435996612\n# Best Parameters:\n# {'learning_rate': 0.11235175929137245, 'max_depth': 14, 'min_child_weight': 7, 'subsample': 0.5941717562234573, \n# 'colsample_bytree': 0.6379404167499119, 'reg_lambda': 8.227997337974575, 'reg_alpha': 0.6782738955642913, \n# 'scale_pos_weight': 1}\n\nbest_params_lgb = {\n    'boosting_type': 'gbdt', \n    'objective': 'binary',\n    'learning_rate': 0.11235175929137245,\n    'max_depth': 14,\n    'min_child_weight': 7.3,\n    'subsample': 0.5941717562234573,\n    'colsample_bytree': 0.6379404167499119,\n    'reg_lambda': 8.227997337974575,\n    'reg_alpha': 0.6782738955642913,\n    'scale_pos_weight': 7,\n    'n_estimators': 10000,\n    'n_jobs': -1,\n    'random_state': 42\n}\n\n# --- Best parameters for CatBoost ---\n\n# Best AUC: 0.9636387741898083\n# Best Parameters:\n# {'learning_rate': 0.18994920012980027, 'depth': 8, 'l2_leaf_reg': 4.598210032803631, \n# 'bagging_temperature': 0.913760790136421, 'random_strength': 6.152008494995199, 'scale_pos_weight': 3.4394486639201385}\n\nbest_params_cat = {\n    'bootstrap_type': 'Bayesian',        \n    'od_type': 'Iter',\n    'learning_rate': 0.18994920012980027,\n    'depth': 8,\n    'l2_leaf_reg': 4.598210032803631,\n    'bagging_temperature': 0.913760790136421,\n    'random_strength': 6.152008494995199,\n    'scale_pos_weight': 7.3,\n    'iterations': 5000,\n    'loss_function': 'Logloss',\n    'eval_metric': 'AUC',\n    'verbose': 0,\n    'task_type': 'CPU',\n    'random_seed': 42\n}","metadata":{"_uuid":"bc2f603c-2bdb-4883-b2a6-4c2d4821d5f9","_cell_guid":"f79c0321-1ad2-48f3-9fb4-b0eef43f54fd","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"execution_failed":"2025-08-05T02:18:31.119Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# model_lgb = LGBMClassifier(**best_params_lgb)\n# model_xgb = XGBClassifier(**best_params_xgb)\n# model_cat = CatBoostClassifier(**best_params_cat)\n\n# stacked_model = StackingClassifier(\n#     estimators=[\n#         ('lgb', model_lgb),\n#         ('xgb', model_xgb),\n#         ('cat', model_cat)\n#     ],\n#     final_estimator=LogisticRegression(max_iter=100000,solver='saga'),\n#     n_jobs=-1,\n#     passthrough=False\n# )\n\n# stacked_model.fit(X, y)","metadata":{"_uuid":"55876ece-ebcc-490a-a2ca-b3738364a9fb","_cell_guid":"30302a53-3fb4-452e-a280-7f45b3470c87","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"execution_failed":"2025-08-05T02:18:31.119Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model_lgb = LGBMClassifier(**best_params_lgb)\nmodel_xgb = XGBClassifier(**best_params_xgb)\nmodel_cat = CatBoostClassifier(**best_params_cat)\n\nvote_model = VotingClassifier(\n    estimators=[\n        ('LGBM', model_lgb),\n        ('XGB', model_xgb),\n        ('CatBoost', model_cat)\n    ],\n    weights=[1.5,1.3,1.1],\n    voting='soft',        \n    n_jobs=-1             \n)\n\nvote_model.fit(X, y)","metadata":{"_uuid":"1794cf46-752f-42b5-935c-d73fa1f42979","_cell_guid":"e19bb0a5-19fd-490c-9827-6343a62be66f","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"\n  border-top: 4px solid #A970FF;\n  padding: 16px 20px;\n  background-color: #1a1a1a;\n  color: white;\n  border-radius: 8px;\n  font-family: 'Segoe UI', sans-serif;\n  line-height: 1.6;\n\">\n  <h3 style=\"color: #A970FF; margin-top: 0;\"> ðŸ”¹ Evaluating Model </h3>\n  <ul style=\"padding-left: 18px; margin: 10px 0;\">\n    \n  </ul>\n</div>","metadata":{"_uuid":"3e606ea4-9833-4583-b8b6-5b03cacb8181","_cell_guid":"36f5ae7a-9c1e-453e-86e8-0c2fec57eaaa","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"accuracy_score(y,vote_model.predict(X))","metadata":{"_uuid":"7b578657-d8fa-4c08-be37-af90e8890e7d","_cell_guid":"d17242c0-ab2d-4f1b-8dc8-73a12f403f25","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"prediction = vote_model.predict(X)","metadata":{"_uuid":"ecd1c6e4-32ed-4192-9a49-99ffc880fb20","_cell_guid":"4b03b09d-88f4-4c3d-a1dc-3a449cb1c07d","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"report = classification_report(y, prediction)\nprint(report)","metadata":{"_uuid":"733e956d-0bfa-4c47-9ffc-3d17f17ccb32","_cell_guid":"2e79a114-3288-48fc-9f16-afb3bc2a5a5d","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cm = confusion_matrix(y, prediction)\n\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"_uuid":"ee4fbd87-cd86-4896-8f24-3657c626efd4","_cell_guid":"baf38f4d-2316-4f40-b6a0-5bec27f1a95c","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"\n  border-top: 4px solid #A970FF;\n  padding: 16px 20px;\n  background-color: #1a1a1a;\n  color: white;\n  border-radius: 8px;\n  font-family: 'Segoe UI', sans-serif;\n  line-height: 1.6;\n\">\n  <h3 style=\"color: #A970FF; margin-top: 0;\"> ðŸ”¹ Oputput Prediction </h3>\n  <ul style=\"padding-left: 18px; margin: 10px 0;\">\n    \n  </ul>\n</div>","metadata":{"_uuid":"f93b713f-fed7-401b-9d6b-bb27c9d5b70b","_cell_guid":"ae40ff78-3fcd-42ec-8906-339b55961c27","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"test_predict = vote_model.predict(data_te)\ntest_predict","metadata":{"_uuid":"f8e3ed20-d8e7-4a9e-821c-fe70c66ccd38","_cell_guid":"199c33c5-65eb-4b1b-affb-e810a5be8739","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"\n  border-top: 4px solid #A970FF;\n  padding: 16px 20px;\n  background-color: #1a1a1a;\n  color: white;\n  border-radius: 8px;\n  font-family: 'Segoe UI', sans-serif;\n  line-height: 1.6;\n\">\n  <h3 style=\"color: #A970FF; margin-top: 0;\"> ðŸ”¹ Submission </h3>\n  <ul style=\"padding-left: 18px; margin: 10px 0;\">\n    \n  </ul>\n</div>","metadata":{"_uuid":"ae427d04-6051-418c-810a-d4fd34ab35a2","_cell_guid":"241451b5-fd8b-4011-ad08-eddd028268d2","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"Submission = pd.DataFrame({'id':data_te['id'],'y':test_predict})\nSubmission","metadata":{"_uuid":"03084669-36aa-45a1-82bc-5f846931da7c","_cell_guid":"250a40a0-ad3c-415f-86a2-f0d03eb44847","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Submission.to_csv('submission.csv',index = False)","metadata":{"_uuid":"0330e811-fdb2-4f7a-b67d-c7453bf7517a","_cell_guid":"7a5e8e7b-0247-48fc-947a-d6e81bc77a47","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Submission['y'].value_counts()","metadata":{"_uuid":"fb142b37-0551-4386-9711-aec20371a5bc","_cell_guid":"193485de-3c76-4125-922a-e858b20694b9","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}